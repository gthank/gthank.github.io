<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: osx | Real Ultimate Programming]]></title>
  <link href="http://www.realultimateprogramming.com//blog/categories/osx/atom.xml" rel="self"/>
  <link href="http://www.realultimateprogramming.com//"/>
  <updated>2014-07-15T22:35:18-04:00</updated>
  <id>http://www.realultimateprogramming.com//</id>
  <author>
    <name><![CDATA[Hank]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sneak Attack: Can't Verify RubyGems on OS X]]></title>
    <link href="http://www.realultimateprogramming.com//blog/2013/12/14/sneak-attack-cant-verify-rubygems-on-os-x/"/>
    <updated>2013-12-14T21:24:43-05:00</updated>
    <id>http://www.realultimateprogramming.com//blog/2013/12/14/sneak-attack-cant-verify-rubygems-on-os-x</id>
    <content type="html"><![CDATA[<p><a href="http://www.jacopretorius.net/2013/10/could-not-verify-the-ssl-certificate-for-rubygems.html">Why Johnny Can’t Install Gems on OS X</a></p>

<p>Back to flipping out…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using bcvi from OS X]]></title>
    <link href="http://www.realultimateprogramming.com//blog/2013/04/18/using-bcvi-from-os-x/"/>
    <updated>2013-04-18T22:34:00-04:00</updated>
    <id>http://www.realultimateprogramming.com//blog/2013/04/18/using-bcvi-from-os-x</id>
    <content type="html"><![CDATA[<p>When it comes to text editing, it doesn’t get much better than
<a href="http://en.wikipedia.org/wiki/Vim_(text_editor)"><code>vim</code></a>—and by extension, <a href="http://code.google.com/p/macvim/">MacVim</a>. If this
is the first time you’ve heard of <code>vim</code>, or the first time you’ve
seriously considered using it, please stop now and go read
<a href="http://stevelosh.com/blog/2010/09/coming-home-to-vim/">Coming Home to Vim</a>, by Steve Losh<sup id="fnref:sjl_footnote"><a href="#fn:sjl_footnote" rel="footnote">1</a></sup>. That
captures the Zen of Vim better than anything else I’ve read.</p>

<p>If you’re still around (or back), then congratulations: you have great
taste in editors. Now on to one of the most irritating things about
<code>vim</code>: getting your <code>vim</code> all tricked out with just the right set of
plugins, color schemes, and keybindings, then getting stuck on a remote
server somewhere with a vanilla version of <code>vim</code>, or maybe even a
different <code>vi</code> clone, like <code>nvi</code>. Enter <a href="http://search.cpan.org/~grantm/App-BCVI-3.08/lib/App/BCVI.pm"><code>bcvi</code></a>.</p>

<p><code>bcvi</code> is a clever little tool that basically copies the file you want
to edit to your machine, invokes <code>gvim</code> on it, then copies it back when
you are done. Presto: you get to edit in the comforts of your own,
highly optimized <code>vim</code> environment.</p>

<p>All you need to do to get <code>bcvi</code> is install it via <a href="http://en.wikipedia.org/wiki/CPAN">CPAN</a>;
it even comes with a couple of helper commands to give you handy shell
aliases, etc. But if you’re running OSX , <a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a>
(if you’re not, go read Steve’s <a href="http://stevelosh.com/blog/2010/02/my-extravagant-zsh-prompt/">My Extravagant Zsh Prompt</a>
for a good explanation of just how awesome it can be), and MacVim, then
there are a couple of things that you’ll probably want to do.</p>

<p>As an aside, you might want to update CPAN so it stops nagging you every
time you try to install something. The default <code>perl</code> that ships with
OSX is under <code>/usr/bin</code>, so upgrading CPAN is going to require <code>sudo</code>.
It’s also rather old. If you’d rather, you can simply install a current
<code>perl</code> via <a href="http://mxcl.github.io/homebrew/">Homebrew</a>. This will get you up-to-date and allow
you to upgrade CPAN without needing sudo. You could also look into
<a href="http://search.cpan.org/~apeiron/local-lib-1.008009/lib/local/lib.pm"><code>local::lib</code></a>, which I’ve used with success on servers.
The instructions I used (NOTE: some of these are probably unique to my
box, but I don’t have a spare handy to test) are:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew tap homebrew/dupes
</span><span class='line'><span class="nv">$ </span>brew install perl
</span><span class='line'><span class="nv">$ </span>brew link –overwrite perl
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>With that out of the way, here’s how to get started with <code>bcvi</code> on a Mac:</p>

<ol>
  <li>Install <code>bcvi</code>. This is as simple as <code>install App::BCVI</code> from the
CPAN prompt.</li>
  <li>To make <code>bcvi</code> use MacVim (or possibly even work, if you don’t have
an X-based version of <code>vim</code>), you need to symlink <code>gvim</code> to <code>mvim</code>.
Since I have my <code>mvim</code> situated in <code>/usr/local/bin</code>, that’s where I
put the <code>gvim</code> symlink to it, as well.</li>
  <li>Get those lovely aliases. Execute <code>bcvi --add-aliases</code>. NOTE: This
only adds them to <code>.bashrc</code>, so if you’re using ZSH, you need to copy
and paste them to your <code>.zshrc</code>.</li>
  <li>Start the listener process. This is as simple as
<code>bcvi --listener &amp;</code>, but I would never remember to type this until
the first time I tried to use <code>bcvi</code> and it errored out. Instead, I
use a <a href="http://en.wikipedia.org/wiki/Launchd"><code>launchd</code></a> job. You can get it from
<a href="https://bitbucket.org/gthank/launch-agents/src">this BitBucket repo</a>. If you’ve never used
<code>launchd</code> jobs before, instructions are included in the README.</li>
  <li>Install <code>bcvi</code> on the remote servers where you’d like to use it using
<code>bcvi --install hostname</code>. This will install <code>bcvi</code> in <code>$HOME/bin</code>, so
permissions <em>shouldn’t</em> be a problem.</li>
  <li>Finally, I like to add an alias so I don’t have to type
<code>bcvi --wrap-ssh -- hostname</code> every time I connect to a server and
want to have access to <code>bcvi</code>. I added the following to my <code>.zshrc</code>:</li>
</ol>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span>ssh-bcvi<span class="o">=</span>’bcvi –wrap-ssh –’
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>At this point, you should be able to <code>ssh-bcvi</code> to your remote server,
find the file you need to edit, and <code>vi filename</code> to edit it in the
comfort of your own <code>vim</code>.</p>

<p>Back to flipping out…</p>
<div class="footnotes">
  <ol>
    <li id="fn:sjl_footnote">
      <p>As a matter of fact, just go read everything Steve writes. I steal ideas from him all the time.<a href="#fnref:sjl_footnote" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to enable git grep -P on OS X using Homebrew]]></title>
    <link href="http://www.realultimateprogramming.com//blog/2012/01/18/how-to-enable-git-grep-p-on-os-x-using/"/>
    <updated>2012-01-18T00:00:00-05:00</updated>
    <id>http://www.realultimateprogramming.com//blog/2012/01/18/how-to-enable-git-grep-p-on-os-x-using</id>
    <content type="html"><![CDATA[<p>If you’re using <a href="http://mxcl.github.com/homebrew/">Homebrew</a> to
manage software on your OS X Lion box, and using the version of
<a href="http://git-scm.com/"><code>git</code></a> it provides, you may have noticed that
you can’t use the <code>-P</code> flag to <code>git grep</code> to enable Perl-compatible
regular expressions
(<abbr title="Perl-compatible regular expressions">PCRE</abbr>). It
turns out the default formula doesn’t enable that option when building
git. Rather than have to override this every single time you upgrade
<code>git</code>, it’s far easier to add this line to your <code>.bashrc</code> (or <code>.zshrc</code>):</p>

<pre><code>export USE_LIBPCRE=yes
</code></pre>

<p>After you do that, you <em>also</em> need to brew install pcre, because if you don’t
you’ll get a build error when you next attempt to build git. It will look
something like:</p>

<pre><code>==&gt; Upgrading git
==&gt; Downloading http://git-core.googlecode.com/files/git-1.7.8.3.tar.gz
File already downloaded in /Users/hank/Library/Caches/Homebrew
==&gt; make prefix=/usr/local/Cellar/git/1.7.8.3 install
GIT_VERSION = 1.7.8.3
    * new build flags or prefix
    * new link flags
./generate-cmdlist.sh &gt; common-cmds.h+ &amp;&amp; mv common-cmds.h+ common-cmds.h
/usr/bin/llvm-gcc -o hex.o -c -MF ./.depend/hex.o.d -MMD -MP  -O3 -w -pipe  -march=core2 -msse4.1 -I. -DUSE_LIBPCRE -DUSE_ST_TIMESPEC  -DSHA1_HEADER='&lt;openssl/sha.h&gt;'  -DNO_MEMMEM  hex.c
/usr/bin/llvm-gcc -o ident.o -c -MF ./.depend/ident.o.d -MMD -MP  -O3 -w -pipe  -march=core2 -msse4.1 -I. -DUSE_LIBPCRE -DUSE_ST_TIMESPEC  -DSHA1_HEADER='&lt;openssl/sha.h&gt;'  -DNO_MEMMEM  ident.c
/usr/bin/llvm-gcc -o kwset.o -c -MF ./.depend/kwset.o.d -MMD -MP  -O3 -w -pipe  -march=core2 -msse4.1 -I. -DUSE_LIBPCRE -DUSE_ST_TIMESPEC  -DSHA1_HEADER='&lt;openssl/sha.h&gt;'  -DNO_MEMMEM  kwset.c
/usr/bin/llvm-gcc -o levenshtein.o -c -MF ./.depend/levenshtein.o.d -MMD -MP  -O3 -w -pipe  -march=core2 -msse4.1 -I. -DUSE_LIBPCRE -DUSE_ST_TIMESPEC  -DSHA1_HEADER='&lt;openssl/sha.h&gt;'  -DNO_MEMMEM  levenshtein.c
/usr/bin/llvm-gcc -o list-objects.o -c -MF ./.depend/list-objects.o.d -MMD -MP  -O3 -w -pipe  -march=core2 -msse4.1 -I. -DUSE_LIBPCRE -DUSE_ST_TIMESPEC  -DSHA1_HEADER='&lt;openssl/sha.h&gt;'  -DNO_MEMMEM  list-objects.c
/usr/bin/llvm-gcc -o ll-merge.o -c -MF ./.depend/ll-merge.o.d -MMD -MP  -O3 -w -pipe  -march=core2 -msse4.1 -I. -DUSE_LIBPCRE -DUSE_ST_TIMESPEC  -DSHA1_HEADER='&lt;openssl/sha.h&gt;'  -DNO_MEMMEM  ll-merge.c
In file included from revision.h:5,
                 from list-objects.c:8:
grep.h:43: error: expected specifier-qualifier-list before ‘pcre’
make: *** [list-objects.o] Error 1
make: *** Waiting for unfinished jobs....
==&gt; Exit Status: 2
http://github.com/mxcl/homebrew/blob/master/Library/Formula/git.rb#L51
==&gt; Environment
HOMEBREW_VERSION: 0.8.1
HEAD: 730f9b7fbc30a74348223fa78e1ede295dc73340
HOMEBREW_PREFIX: /usr/local
HOMEBREW_CELLAR: /usr/local/Cellar
Hardware: dual-core 64-bit penryn
OS X: 10.7.2
Kernel Architecture: x86_64
Ruby: 1.8.7-249
/usr/bin/ruby =&gt; /System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin/ruby
Xcode: 4.2.1
GCC-4.0: N/A
GCC-4.2: N/A
LLVM: build 2336
Clang: 3.0 build 211
MacPorts or Fink? false
X11 installed? true
==&gt; Build Flags
CC: /usr/bin/llvm-gcc =&gt; /usr/llvm-gcc-4.2/bin/llvm-gcc-4.2
CXX: /usr/bin/llvm-g++ =&gt; /usr/llvm-gcc-4.2/bin/llvm-g++-4.2
LD: /usr/bin/llvm-gcc =&gt; /usr/llvm-gcc-4.2/bin/llvm-gcc-4.2
CFLAGS: -O3 -w -pipe  -march=core2 -msse4.1
CXXFLAGS: -O3 -w -pipe  -march=core2 -msse4.1
MAKEFLAGS: -j2

Error: Failed executing: make prefix=/usr/local/Cellar/git/1.7.8.3 install
These existing issues may help you:
    https://github.com/mxcl/homebrew/issues/6820
    https://github.com/mxcl/homebrew/issues/6971
    https://github.com/mxcl/homebrew/issues/7462
    https://github.com/mxcl/homebrew/issues/8030
    https://github.com/mxcl/homebrew/issues/8913
    https://github.com/mxcl/homebrew/issues/8977
    https://github.com/mxcl/homebrew/issues/9017
    https://github.com/mxcl/homebrew/issues/9023
    https://github.com/mxcl/homebrew/issues/9435
    https://github.com/mxcl/homebrew/issues/9538
    https://github.com/mxcl/homebrew/issues/9574
    https://github.com/mxcl/homebrew/issues/9618
Otherwise, please report the bug:
    https://github.com/mxcl/homebrew/wiki/checklist-before-filing-a-new-issue
</code></pre>

<p>It’s that little line <code>grep.h:43: error: expected specifier-qualifier-list
before ‘pcre’</code> that clues you in that you have a
<abbr title="Perl-compatible regular expressions">PCRE</abbr> problem.</p>

<p>Back to flipping out…</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Note to Self: Changing info for the postgres system user]]></title>
    <link href="http://www.realultimateprogramming.com//blog/2010/11/22/note-to-self-changing-info-for-postgres/"/>
    <updated>2010-11-22T00:00:00-05:00</updated>
    <id>http://www.realultimateprogramming.com//blog/2010/11/22/note-to-self-changing-info-for-postgres</id>
    <content type="html"><![CDATA[<p>Do you use MacPorts? Ever switch from one version of PostgreSQL to another,
e.g., 8.4 to 9.0? Did you notice that it started complaining about a non-
existent home directory for the <code>postgres</code> system user? Me, too.</p>

<p>My first instinct was to edit the user, but there is no entry for <code>postgres</code> in
<code>/etc/passwd</code>. That led me to this
<a href="http://girders.org/changing-postgres-user-info-on-os-x-106">excellent article</a>.
Using that info, I cooked up the following command:</p>

<pre><code>sudo dscl localhost change /Local/Default/Users/postgres NFSHomeDirectory /opt/local/var/db/postgresql84 /opt/local/var/db/postgresql90
</code></pre>

<p>Back to flipping out…</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up gitosis on OS X]]></title>
    <link href="http://www.realultimateprogramming.com//blog/2009/11/03/setting-up-gitosis-on-os-x/"/>
    <updated>2009-11-03T00:00:00-05:00</updated>
    <id>http://www.realultimateprogramming.com//blog/2009/11/03/setting-up-gitosis-on-os-x</id>
    <content type="html"><![CDATA[<h4 id="what-is-gitosis">What is gitosis?</h4>

<p>gitosis is a wrapper around git that makes it easier share repositories,
especially as it relates to managing access rights.</p>

<h4 id="why-should-i-care">Why Should I Care?</h4>

<p>The benefit that made me check it out is that I don’t have to create an
account on my dev machine for every single developer to whom I’d like to give
access to some of my git repos.</p>

<h4 id="assumptions">Assumptions</h4>

<ul>
  <li>You installed git and python from <a href="http://www.macports.org/">MacPorts</a>. </li>
  <li>You have enabled “Remote Login” in the “Sharing” Preferences pane. </li>
  <li>You have a public key (typically generated via ssh-keygen); see the <a href="http://developer.apple.com/mac/library/documentation/Darwin/Reference/ManPages/man1/ssh-keygen.1.html">man pages</a> for more details. </li>
</ul>

<h4 id="installation">Installation</h4>

<h5 id="preliminary-steps">Preliminary Steps</h5>

<ol>
  <li>Create a git user </li>
  <li>Add git to the list of users who can ssh in </li>
  <li>
    <p>Configure git’s .bashrc (<strong>NOT</strong> .bash_profile) so port-installed apps are on the PATH. Mine looks like </p>

    <p>export PATH=/opt/local/bin:/opt/local/sbin:/opt/local/Library/Frameworks/Python.framework/Versions/Current/bin/:$PATH
   export MANPATH=/opt/local/share/man:$MANPATH</p>
  </li>
</ol>

<h5 id="installing-gitosis">Installing gitosis</h5>

<ol>
  <li>cd /tmp</li>
  <li>mkdir src</li>
  <li>cd src</li>
  <li>git clone git://eagain.net/gitosis.git</li>
  <li>cd gitosis</li>
  <li>python setup.py install</li>
  <li>sudo chmod 755 /Users/git/repositories/gitosis-admin.git/hooks/post-update</li>
</ol>

<h4 id="configuration">Configuration</h4>

<h5 id="setting-up-admin-access">Setting up Admin Access</h5>

<p>Add yourself as an admin (member of the gitosis-admin group) by executing sudo
-H -u git gitosis-init &lt; ~/.ssh/id_dsa.pub. This will use your public key as
input into gitosis-init and set you up as an admin.</p>

<h5 id="cloning-the-admin-repo">Cloning the Admin Repo</h5>

<p>Try git clone git@<code>$HOST</code>:gitosis-admin.git. It should work. If it doesn’t,
and complains about the other end unexpectedly hanging up, the $PATH for git
is probably misconfigured. Make sure you configured .bashrc, because
.bash_profile won’t stick around.</p>

<h5 id="configuring-a-new-repo">Configuring a New Repo</h5>

<p>You make configuration changes to gitosis by editing your local clone of
gitosis-admin and FIXME kbd pushing them back. Let’s add a new repo.</p>

<ol>
  <li>Open up gitosis.conf in your editor of choice </li>
  <li>Add an entry like the one below </li>
  <li>Save </li>
  <li>
    <p>git push</p>

    <p>[group fabfour]
   members = john paul george ringo
   writable = the_monkeys_are_hacks</p>
  </li>
</ol>

<h6 id="breaking-it-down">Breaking It Down</h6>

<pre><code>    [group fabfour]
</code></pre>

<p>We’re defining a new group, named fabfour.</p>

<pre><code>    members = john paul george ringo
</code></pre>

<p>Adding john, paul, george, ringo as members of the fabfour group.</p>

<pre><code>    writable = the_monkeys_are_hacks
</code></pre>

<p>Listing the_monkeys_are_hacks as the only writable repo for the fabfour group.
In case you’re saying “Wait, I don’t have a the_monkeys_are_hacks repo!” don’t
worry, that’s coming next. You have to do all of this <em>before</em> you try to push
anything to gitosis.</p>

<h5 id="populating-your-new-repo">Populating Your New Repo</h5>

<ol>
  <li>If the repo doesn’t exist, create it </li>
</ol>

<pre><code>1. mkdir the_monkeys_are_hacks
2. cd the_monkeys_are_hacks
3. git init
4. Do Work Here and Commit It    2. Add your new gitosis-managed repo as a remote; inside your repo, execute git remote add origin git@`$HOST`:the_monkeys_are_hacks.git
</code></pre>

<ol>
  <li>Push to it; inside your repo, execute git push origin master:refs/heads/master</li>
</ol>

<p>If the last step fails with an inscrutable error, there’s a good chance you
forgot to chmod the post-update hook.</p>

<h5 id="actually-letting-john-and-the-gang-access-the-repo">Actually Letting John and the Gang Access the Repo</h5>

<p>Before john, paul, george, or ringo can actually get into the server, you need
to add their public keys under gitosis-admin/keydir. I’m going to wave my
hands concerning how you get the public keys, but they need to be added to
gitosis-admin/keydir and they need to be named using the convention
username.pub, so we’d have:</p>

<ol>
  <li>cd gitosis-admin</li>
  <li>cp /tmp/john.pub keydir/</li>
  <li>cp /tmp/paul.pub keydir/</li>
  <li>cp /tmp/george.pub keydir/</li>
  <li>cp /tmp/ringo.pub keydir/</li>
  <li>git add keydir/john.pub keydir/paul.pub keydir/george.pub keydir/ringo.pub</li>
  <li>git ci -m “Adding the keys for the Fab Four”</li>
  <li>git push</li>
</ol>

<h4 id="want-more">Want More?</h4>

<ul>
  <li>Check out this extremely detailed (non-Mac-specific) <a href="http://scie.nti.st/2007/11/14/hosting-git-repositories-the-easy-and-secure-way">guide</a>. </li>
</ul>

<p>Back to flipping out…</p>

]]></content>
  </entry>
  
</feed>
