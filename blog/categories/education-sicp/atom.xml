<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Education:SICP | Real Ultimate Programming]]></title>
  <link href="http://www.realultimateprogramming.com//blog/categories/education-sicp/atom.xml" rel="self"/>
  <link href="http://www.realultimateprogramming.com//"/>
  <updated>2014-07-15T22:35:18-04:00</updated>
  <id>http://www.realultimateprogramming.com//</id>
  <author>
    <name><![CDATA[Hank]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Exercises from Section 1.2 of SICP]]></title>
    <link href="http://www.realultimateprogramming.com//blog/2008/08/10/exercises-from-section-12-of-sicp/"/>
    <updated>2008-08-10T00:00:00-04:00</updated>
    <id>http://www.realultimateprogramming.com//blog/2008/08/10/exercises-from-section-12-of-sicp</id>
    <content type="html"><![CDATA[<p>Here’s a quick update from my ongoing study of
<abbr title="Structure and Interpretation of Computer Programs">SICP</abbr>.</p>

<h4 id="exercise-19httpmitpressmitedusicpfull-textbookbook-z-h-11html25thm19"><a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%25_thm_1.9">Exercise 1.9</a></h4>

<p>I didn’t have access to a scanner to show the results of my expansion,
but my answer to the recursive or iterative question was: <code>recursive</code>.
The <code>inc</code> function in the definition of <code>+</code> is deferred until the
recursive call to <code>+</code> is complete, so the function has a linearly
recursive shape.</p>

<h4 id="exercise-110httpmitpressmitedusicpfull-textbookbook-z-h-11html25thm110"><a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%25_thm_1.10">Exercise 1.10</a></h4>

<ul>
  <li><code>(A (1 10)) ⇒ 1024</code></li>
  <li><code>(A (2 4)) ⇒ 65536</code></li>
  <li><code>(A (3 3)) ⇒ 65536</code></li>
  <li><code>(define (f n) (A 0 n)) ⇒ 2n</code></li>
  <li><code>(define (g n) (A 1 n)) ⇒ 2n</code></li>
  <li><code>(define (g n) (A 2 n)) ⇒ 22n</code></li>
</ul>

<h4 id="exercise-111httpmitpressmitedusicpfull-textbookbook-z-h-11html25thm111"><a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%25_thm_1.11">Exercise 1.11</a></h4>

<h5 id="recursive">Recursive</h5>

<pre><code>(define (foo n)
  (cond ((&lt; n 3) n)
        (else (+ (foo (- n 1)) (* 2 (foo (- n 2))) (* 3 (foo (- n 3)))))))
</code></pre>

<h5 id="iterative">Iterative</h5>

<p>There were a few false starts, but after
<a href="http://eli.thegreenplace.net/2007/06/28/sicp-section-122/">Eli Bendersky’s tip</a>
about solving the problem using a <code>for</code> loop, it all began to fall into place.</p>

<h6 id="for-loop"><code>for</code> Loop</h6>

<pre><code>function fooFor(n) {
    var a = 2;
    var b = 1;
    var c = 0;
    var result = n;
    for (i = 3; i &lt;= n; i++) {
        result = a + 2*b + 3*c;
        c = b;
        b = a;
        a = result;
    }
    return result;
}
</code></pre>

<h6 id="tail-recursion">Tail-Recursion</h6>

<pre><code>(define (bar n)
  (cond ((&lt; n 3) n)
        (else (bar-iter 2 1 0 n))))

(define (bar-iter a b c count)
  (cond ((= count 2) a)
        (else (bar-iter (+ a (* 2 b) (* 3 c)) a b (- count 1)))))
</code></pre>

<p>Back to flipping out…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Structure and Interpretation of Computer Programs, section 1.2]]></title>
    <link href="http://www.realultimateprogramming.com//blog/2008/07/28/sicp-section-12/"/>
    <updated>2008-07-28T00:00:00-04:00</updated>
    <id>http://www.realultimateprogramming.com//blog/2008/07/28/sicp-section-12</id>
    <content type="html"><![CDATA[<p>Today’s post is just a brief overview of Section 1.2, but don’t
worry: I’ll be covering the (numerous) exercises soon. Section
1.2 covers a lot of ground in a little space. It introduces the
ideas of recursive processes (both linear- and tree-recursive
processes, a distinction that was new to me, but blindingly obvious
in hindsight) and iterative processes (via tail-recursion),
<a href="http://en.wikipedia.org/wiki/Big_O_notation">Big O</a> analysis (though it
doesn’t call it that), and mentions probabilistic methods in passing.
I was a bit surprised at the early introduction of Big O; even though
I consider it one of the more important things I learned in school, my
intro CS course didn’t cover it until the end of the quarter, and the
coverage was hardly in-depth.</p>

<h4 id="linear-vs-tree-recursion">Linear vs. Tree Recursion</h4>

<p>This one is actually pretty straightforward: any time you
only need to recurse once on each pass of the process, you’ve got
<a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%25_sec_1.2.1">linear recursion</a>;
if you need to recurse multiple times, you’ve got
<a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%25_sec_1.2.2">tree recursion</a>.</p>

<h4 id="big-o-analysis">Big O Analysis</h4>

<p>SICP calls it
<a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%25_sec_1.2.3">order of growth</a>.
The basic concept is to analyze your algorithm/process/whatever in terms
of one aspect (typically time or space) and determine how that aspect
grows with respect to some aspect of the input (typically, the number or
size); think <a href="http://en.wikipedia.org/wiki/Limit_(mathematics)">limits</a>
from math class. For instance, the running time of
<a href="http://en.wikipedia.org/wiki/Bubble_sort">BubbleSort</a> grows
proportionally to the square of the length of the array/list being
sorted, so its Big O is <em>O(n2)</em>.</p>

<h4 id="probabilistic-methods">Probabilistic Methods</h4>

<p>The basic idea is that often a tight-enough approximation, which isn’t
even all that tight in a lot of cases, is just as good as an exact
answer, and a lot cheaper to compute. There’s a lot of ongoing research
concerning probabilistic methods right now.</p>

<p>Back to flipping out…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You Didn't Think I Had Forgotten, Did You?]]></title>
    <link href="http://www.realultimateprogramming.com//blog/2008/04/24/you-didnt-think-i-had-forgotten-did-you/"/>
    <updated>2008-04-24T00:00:00-04:00</updated>
    <id>http://www.realultimateprogramming.com//blog/2008/04/24/you-didnt-think-i-had-forgotten-did-you</id>
    <content type="html"><![CDATA[<p>This is the first post in my long-promised series of follow-up posts to
<a href="http://realultimateprogramming.blogspot.com/2007/06/education-of-programmer.html">The Education of a Programmer</a>.
I must have started this post at least 5 times, and each time I read
the first sections of
<em>Structure and Interpretation of Computer Programs</em> (<abbr title="Structure and Interpretation of Computer Programs">SICP</abbr>).
I can’t really come up with words to do it justice—Abelson and the
Sussmans describe the core concepts of computer programs in the most
concise yet understandable way I’ve ever seen. Since I can’t improve on
the original, these posts will just be a sort of running diary as I work
through the exercises in the book. And without further ado…</p>

<h2 id="exercise-11httpmitpressmitedusicpfull-textbookbook-z-h-10htmlthm11"><a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_thm_1.1">Exercise 1.1</a></h2>

<p>In this exercise, we are asked to manually evaluate each expression as
if we were the interpreter.</p>

<pre><code>&lt;table summary="A table comparing my answers to the actual result from the interpreter"&gt;
  &lt;caption&gt;Results from &lt;abbr title="Structure and Interpretation of Computer Programs"&gt;SICP&lt;/abbr&gt; Exercise 1.1&lt;/caption&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th id="my-answer"&gt;My Answer&lt;/th&gt;
      &lt;th id="interpreter-result"&gt;Interpreter's Answer&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td headers="my-answer"&gt;&lt;kbd&gt;10&lt;/kbd&gt;&lt;/td&gt;
      &lt;td headers="interpreter-result"&gt;&lt;kbd&gt;10&lt;/kbd&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td headers="my-answer"&gt;&lt;kbd&gt;12&lt;/kbd&gt;&lt;/td&gt;
      &lt;td headers="interpreter-result"&gt;&lt;kbd&gt;12&lt;/kbd&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td headers="my-answer"&gt;&lt;kbd&gt;8&lt;/kbd&gt;&lt;/td&gt;
      &lt;td headers="interpreter-result"&gt;&lt;kbd&gt;8&lt;/kbd&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td headers="my-answer"&gt;&lt;kbd&gt;3&lt;/kbd&gt;&lt;/td&gt;
      &lt;td headers="interpreter-result"&gt;&lt;kbd&gt;3&lt;/kbd&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td headers="my-answer"&gt;&lt;kbd&gt;6&lt;/kbd&gt;&lt;/td&gt;
      &lt;td headers="interpreter-result"&gt;&lt;kbd&gt;6&lt;/kbd&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td headers="my-answer"&gt;(this was sort of a trick question - the interpreter doesn't print anything when it evaluates &lt;code&gt;define&lt;/code&gt; expressions)&lt;/td&gt;
      &lt;td headers="interpreter-result"&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td headers="my-answer"&gt;see above&lt;/td&gt;
      &lt;td headers="interpreter-result"&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td headers="my-answer"&gt;&lt;kbd&gt;19&lt;/kbd&gt;&lt;/td&gt;
      &lt;td headers="interpreter-result"&gt;&lt;kbd&gt;19&lt;/kbd&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td headers="my-answer"&gt;&lt;kbd&gt;#f&lt;/kbd&gt;&lt;/td&gt;
      &lt;td headers="interpreter-result"&gt;&lt;kbd&gt;#f&lt;/kbd&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td headers="my-answer"&gt;&lt;kbd&gt;4&lt;/kbd&gt;&lt;/td&gt;
      &lt;td headers="interpreter-result"&gt;&lt;kbd&gt;4&lt;/kbd&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td headers="my-answer"&gt;&lt;kbd&gt;16&lt;/kbd&gt;&lt;/td&gt;
      &lt;td headers="interpreter-result"&gt;&lt;kbd&gt;16&lt;/kbd&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td headers="my-answer"&gt;&lt;kbd&gt;6&lt;/kbd&gt;&lt;/td&gt;
      &lt;td headers="interpreter-result"&gt;&lt;kbd&gt;6&lt;/kbd&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td headers="my-answer"&gt;&lt;kbd&gt;16&lt;/kbd&gt;&lt;/td&gt;
      &lt;td headers="interpreter-result"&gt;&lt;kbd&gt;16&lt;/kbd&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</code></pre>

<h2 id="exercise-12httpmitpressmitedusicpfull-textbookbook-z-h-10htmlthm12"><a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_thm_1.2">Exercise 1.2</a></h2>

<p>In this exercise, we are asked to convert a mathematical expression into
prefix notation.</p>

<pre><code>(/ 
   (+ 5 4 
      (- 2 
         (- 3 
            (+ 6 
               (/ 3 4)))))
   (* 3 
      (- 2 6) 
      (- 2 7)))
</code></pre>

<h2 id="exercise-13httpmitpressmitedusicpfull-textbookbook-z-h-10htmlthm13"><a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_thm_1.3">Exercise 1.3</a></h2>

<p>In this exercise, we are asked to define a procedure that takes three
numbers as parameters and returns the sum of the square of the two
largest parameters. If you were starting from scratch, the solution
would look something like this:</p>

<pre><code>  (define
    (sum-of-squares-for-two-largest a b c)
    (cond ((and (&lt; a b) (&lt; a c)) (+ (* b b) (* c c)))
          ((and (&lt; b c) (&lt; b c)) (+ (* a a) (* c c)))
          (else (+ (* a a) (* b b)))))
</code></pre>

<p>But that’s not very clean. There’s too much repeated logic, and it’s not
very readable; we need some abstraction. The most obvious abstraction is
to create a <code>square</code> procedure that looks something like this:</p>

<pre><code>  (define
    (square a)
    (* a a))
</code></pre>

<p>Using this new procedure, we can rewrite our
<code>sum-of-squares-for-two-largest</code> procedure like so:</p>

<pre><code>  (define
    (sum-of-squares-for-two-largest a b c)
    (cond ((and (&lt; a b) (&lt; a c)) (+ (square b) (square c)))
          ((and (&lt; b c) (&lt; b c)) (+ (square a) (square c)))
          (else (+ (square a) (square b)))))
</code></pre>

<p>That’s better, but there’s still room for improvement: we can create a
<code>sum- of-squares</code> procedure that looks like this:</p>

<pre><code>  (define 
    (sum-of-squares a b) 
    (+ (square a) (square b)))
</code></pre>

<p>Look at that: we created the same procedures that the authors walked us
through creating earlier this chapter. Using our new <code>sum-of-squares</code>
procedure, <code>sum-of-squares-for-two-largest</code> looks like this:</p>

<pre><code>  (define
      (sum-of-squares-for-two-largest a b c)
      (cond ((and (&lt; a b) (&lt; a c)) (sum-of-squares b c))
            ((and (&lt; b c) (&lt; b c)) (sum-of-squares a c))
            (else (sum-of-squares a b))))
</code></pre>

<h2 id="exercise-14httpmitpressmitedusicpfull-textbookbook-z-h-10htmlthm14"><a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_thm_1.4">Exercise 1.4</a></h2>

<p>In this exercise, we are asked to describe what the following procedure
is doing.</p>

<pre><code>  (define (a-plus-abs-b a b)
    ((if (&gt; b 0) + -) a b))
</code></pre>

<p>This procedure is summing a and the absolute value of b. The
<code>(if (&gt; b 0) + -)</code> tells us that the procedure being applied to
the arguments will differ based on whether b is positive or
non-positive. When it’s non-positive, b will be subtracted from a, which
is functionally equivalent to always adding the absolute value of b to
a.</p>

<h2 id="exercise-15httpmitpressmitedusicpfull-textbookbook-z-h-10htmlthm15"><a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_thm_1.5">Exercise 1.5</a></h2>

<p>Applicative-order</p>

<pre><code>This will result in an infinite loop, because the interpreter will attempt to evaluate `p`, which is recursive and has no exit conditions Normal-order

This will return 0 because the interpreter will evaluate the `if` before deciding whether to evaluate `p` or return 0, and the results of the `if` will indicate it should return 0
</code></pre>

<p>Back to flipping out…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Education of a Programmer]]></title>
    <link href="http://www.realultimateprogramming.com//blog/2007/06/04/education-of-programmer/"/>
    <updated>2007-06-04T00:00:00-04:00</updated>
    <id>http://www.realultimateprogramming.com//blog/2007/06/04/education-of-programmer</id>
    <content type="html"><![CDATA[<p>In a previous post,
<a href="http://realultimateprogramming.blogspot.com/2007/05/picking-your-next-programming-language.html">Picking Your Next Programming Language</a>,
I discussed my plans to begin learning a new programming language. Now
it’s time for the big reveal: Scheme.</p>

<p>I picked Scheme for a variety of reasons: I don’t know any functional
languages, I don’t know any LISP dialects, etc. By far the most
important reason, though, is that it is the language used in SICP, and
that’s the textbook for
<a href="http://ocw.mit.edu/OcwWeb/Electrical-Engineering-and-Computer-Science/6-001Spring-2005/CourseHome/index.htm">CS 6.001 - Structure and Interpretation of Computer Programs</a>
at MIT. I’ll be posting periodic progress updates and interesting
tidbits as I work through the material available through the incredible
OCW program.</p>

<p>Since there is more to being a programmer than the computer languages
you know, I’ll also be working through the course material for
<a href="http://ocw.mit.edu/OcwWeb/Foreign-Languages-and-Literatures/21F-101Spring-2006/CourseHome/index.htm">21F.101 / 21F.151 Chinese I</a>.
If I can figure out how to make Blogger work with Chinese characters,
I’ll post progress updates as I work through this class as well.</p>

<p>Back to flipping out…</p>

]]></content>
  </entry>
  
</feed>
